from aiogram import types
from aiogram.types import KeyboardButton, ParseMode, ReplyKeyboardMarkup
from bot.controller.States import Cabinet, HelpMenu, StudentMenu
from bot.model.User import User
from bot.repository.StateInfoRepository import StateInfoRepository
from bot.repository.UserRepository import UserRepository
from bot.service.TokenService import TokenService
from bot.teletrik.Controller import Controller
from bot.teletrik.DI import controller


@controller(HelpMenu)
class HelpMenuStateController(Controller):
    def __init__(
        self,
        user_repository: UserRepository,
        token_service: TokenService,
        state_info_repository: StateInfoRepository,
    ):
        self.user_repository: UserRepository = user_repository
        self.token_service: TokenService = token_service
        self.state_info_repository: StateInfoRepository = state_info_repository

    MAIN_MENU = "‚óÇ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    HOW_TO_CHECK_TASK = "‚Ñπ –ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á?"
    HOW_TO_UNDERSTAND_RESULTS = "‚ÑπÔ∏è –ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç + - ? ‚úÖ ‚ùå üîÑ"
    HOW_TO_CABINET = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ ‚ñ∏"

    CHOOSE_ACTION = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É"

    HELP_MENU_KEYBOARD = ReplyKeyboardMarkup()
    HELP_MENU_KEYBOARD.add(
        KeyboardButton(HOW_TO_CHECK_TASK),
        KeyboardButton(HOW_TO_UNDERSTAND_RESULTS),
        KeyboardButton(MAIN_MENU),
        KeyboardButton(HOW_TO_CABINET)
    )

    async def handle(self, message: types.Message):

        match message.text:

            case self.MAIN_MENU:
                tg_id: str = message.from_user.id
                user: User | None = await self.user_repository.get_by_telegram_id(tg_id)

                if user is None:
                    token: str = self.token_service.generate_new_token(tg_id)
                    await self.user_repository.create_user(token, "student", tg_id)
                    self.state_info_repository.create(message.from_user.id, token)
                    return StudentMenu
                else:
                    self.state_info_repository.create(
                        message.from_user.id, user.user_id
                    )
                    return StudentMenu

            case self.HOW_TO_CABINET:
                return Cabinet

            case self.HOW_TO_CHECK_TASK:
                await message.answer(
                    """*–ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á*
1. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ –º–µ–Ω—é
2. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ—à–µ–Ω–∏–µ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ. –ë–æ—Ç –Ω–∞—á–Ω—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç.
3. –¢–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –º–µ–Ω—é "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—É—Å–∫–æ–≤"
4. –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ –±—ã–ª —É–¥–∞—á–Ω—ã–π, —Ç–æ –≤ –º–µ–Ω—é "–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç" –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–∏–Ω-–∫–æ–¥ –∏ —Ö–µ—à, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å–µ.""",
                    parse_mode=ParseMode.MARKDOWN,
                )
                return HelpMenu
            case self.HOW_TO_UNDERSTAND_RESULTS:
                await message.answer(
                    """*–°—Ç–∞—Ç—É—Å—ã —Ä–µ—à–µ–Ω–∏–π*
‚ö¨ `+` ‚Äî —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ.
‚ö¨ `-` ‚Äî —Ä–µ—à–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ.
‚ö¨ `?` ‚Äî —Ä–µ—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è.
*–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á*
–ï—Å–ª–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–µ—à–µ–Ω–∏–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤:
‚ö¨ ‚úÖ ‚Äî –µ—Å–ª–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
‚ö¨ ‚ùå ‚Äî –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç.
‚ö¨ üîÑ ‚Äî –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è.""",
                    parse_mode=ParseMode.MARKDOWN,
                )
                return HelpMenu
            case _:
                await message.answer(
                    "–Ø –í–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"
                )
                return HelpMenu

    async def prepare(self, message: types.Message):
        await message.answer(self.CHOOSE_ACTION, reply_markup=self.HELP_MENU_KEYBOARD)
